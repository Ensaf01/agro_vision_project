{"ast":null,"code":"var _jsxFileName = \"C:\\\\Agro-Vision\\\\frontend\\\\src\\\\pages\\\\FarmerHomePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FarmerCropPage() {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [crops, setCrops] = useState([]);\n\n  // Fetch crops that are not harvested\n  const fetchCrops = async () => {\n    if (!user) return;\n    try {\n      const res = await fetch(`http://localhost:5000/api/marketplace/farmer/${user.id}`, {\n        credentials: \"include\"\n      });\n      const data = await res.json();\n      setCrops(data); // only non-harvested crops are returned from backend\n    } catch (err) {\n      console.error(\"Error fetching crops:\", err);\n    }\n  };\n  useEffect(() => {\n    fetchCrops();\n  }, [user]);\n  const handleHarvest = async cropId => {\n    const price = prompt(\"Enter selling price:\");\n    const quantity = prompt(\"Enter quantity to harvest:\");\n    try {\n      const res = await fetch(`http://localhost:5000/api/marketplace/harvest/${cropId}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          price,\n          quantity\n        })\n      });\n      const data = await res.json();\n      if (!res.ok) return alert(data.message);\n      alert(\"Crop harvested and added to marketplace!\");\n      fetchCrops(); // ✅ Refetch crops after harvest so it disappears\n    } catch (err) {\n      console.error(err);\n      alert(\"Error harvesting crop\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"crops-grid\",\n    children: [crops.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No crops available. Add some!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 30\n    }, this), crops.map(crop => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"crop-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: crop.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Quantity: \", crop.quantity, \" \", crop.unit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Base Price: \", crop.base_price, \" Tk\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleHarvest(crop.id),\n        children: \"Harvest & Add to Marketplace\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, crop.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(FarmerCropPage, \"w9BMySGZmcUECoVEPz+VM6YVh/A=\");\n_c = FarmerCropPage;\nvar _c;\n$RefreshReg$(_c, \"FarmerCropPage\");","map":{"version":3,"names":["React","useEffect","useState","useContext","AuthContext","jsxDEV","_jsxDEV","FarmerCropPage","_s","user","crops","setCrops","fetchCrops","res","fetch","id","credentials","data","json","err","console","error","handleHarvest","cropId","price","prompt","quantity","method","headers","body","JSON","stringify","ok","alert","message","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","map","crop","name","unit","base_price","onClick","_c","$RefreshReg$"],"sources":["C:/Agro-Vision/frontend/src/pages/FarmerHomePage.jsx"],"sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\n\r\nexport default function FarmerCropPage() {\r\n  const { user } = useContext(AuthContext);\r\n  const [crops, setCrops] = useState([]);\r\n\r\n  // Fetch crops that are not harvested\r\n  const fetchCrops = async () => {\r\n    if (!user) return;\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/api/marketplace/farmer/${user.id}`, {\r\n        credentials: \"include\",\r\n      });\r\n      const data = await res.json();\r\n      setCrops(data); // only non-harvested crops are returned from backend\r\n    } catch (err) {\r\n      console.error(\"Error fetching crops:\", err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCrops();\r\n  }, [user]);\r\n\r\n  const handleHarvest = async (cropId) => {\r\n    const price = prompt(\"Enter selling price:\");\r\n    const quantity = prompt(\"Enter quantity to harvest:\");\r\n\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/api/marketplace/harvest/${cropId}`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        credentials: \"include\",\r\n        body: JSON.stringify({ price, quantity }),\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) return alert(data.message);\r\n\r\n      alert(\"Crop harvested and added to marketplace!\");\r\n      fetchCrops(); // ✅ Refetch crops after harvest so it disappears\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"Error harvesting crop\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"crops-grid\">\r\n      {crops.length === 0 && <p>No crops available. Add some!</p>}\r\n      {crops.map((crop) => (\r\n        <div key={crop.id} className=\"crop-card\">\r\n          <h3>{crop.name}</h3>\r\n          <p>Quantity: {crop.quantity} {crop.unit}</p>\r\n          <p>Base Price: {crop.base_price} Tk</p>\r\n          <button onClick={() => handleHarvest(crop.id)}>Harvest & Add to Marketplace</button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}