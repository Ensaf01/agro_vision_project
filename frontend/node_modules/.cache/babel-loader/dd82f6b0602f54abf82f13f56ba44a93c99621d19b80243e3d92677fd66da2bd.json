{"ast":null,"code":"var _jsxFileName = \"C:\\\\Agro-Vision\\\\frontend\\\\src\\\\pages\\\\FarmerCropPage.jsx\",\n  _s = $RefreshSig$();\n//frontend/src/pages/FarmerCropPage.jsx\nimport React, { useEffect, useState, useContext } from \"react\";\nimport jsPDF from \"jspdf\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FarmerCropPage() {\n  _s();\n  const [searchArea, setSearchArea] = useState(\"\");\n  const [weather, setWeather] = useState(null);\n  const [weatherLoading, setWeatherLoading] = useState(false);\n  const [weatherError, setWeatherError] = useState(\"\");\n  const WEATHER_API_KEY = \"93869cd59972015bacc2b11a2c2b74c7\";\n  const handleWeatherSearch = async e => {\n    e.preventDefault();\n    setWeather(null);\n    setWeatherError(\"\");\n    setWeatherLoading(true);\n    try {\n      const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(searchArea)},bd&appid=${WEATHER_API_KEY}&units=metric`);\n      if (!res.ok) {\n        setWeatherError(\"Area not found or API error.\");\n        setWeatherLoading(false);\n        return;\n      }\n      const data = await res.json();\n      setWeather(data);\n    } catch (err) {\n      setWeatherError(\"Failed to fetch weather data.\");\n    } finally {\n      setWeatherLoading(false);\n    }\n  };\n  const {\n    user\n  } = useContext(AuthContext);\n  const [crops, setCrops] = useState([]);\n  const [requestsMap, setRequestsMap] = useState({});\n  const [selectedRequests, setSelectedRequests] = useState({});\n  const [dealPopup, setDealPopup] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [form, setForm] = useState({\n    name: \"\",\n    land_size: \"\",\n    cultivate_date: \"\",\n    harvest_date: \"\",\n    total_cost: \"\",\n    crop_pic: \"\"\n  });\n  const [picPreview, setPicPreview] = useState(\"\");\n  const [formError, setFormError] = useState(\"\");\n  const [successMsg, setSuccessMsg] = useState(\"\");\n\n  // harvest modal\n  const [harvestCrop, setHarvestCrop] = useState(null);\n  const [harvestForm, setHarvestForm] = useState({\n    quantity: \"\",\n    price: \"\"\n  });\n  const [harvestError, setHarvestError] = useState(\"\");\n  const [harvestSuccess, setHarvestSuccess] = useState(\"\");\n  const fetchCrops = React.useCallback(async () => {\n    if (!user) return;\n    try {\n      const res = await fetch(`http://localhost:5000/api/crops/farmer/${user.id}`, {\n        credentials: \"include\"\n      });\n      const data = await res.json();\n      setCrops(data);\n      for (const crop of data) {\n        const reqRes = await fetch(`http://localhost:5000/api/marketplace/${crop.id}/requests`, {\n          credentials: \"include\"\n        });\n        if (reqRes.ok) {\n          const reqData = await reqRes.json();\n          setRequestsMap(prev => ({\n            ...prev,\n            [crop.id]: reqData\n          }));\n        }\n      }\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  }, [user]);\n  useEffect(() => {\n    fetchCrops();\n  }, [user, fetchCrops]);\n  const handleChange = e => setForm({\n    ...form,\n    [e.target.name]: e.target.value\n  });\n  const handlePicChange = e => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setForm(f => ({\n          ...f,\n          crop_pic: reader.result\n        }));\n        setPicPreview(reader.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  const handleAddCrop = async e => {\n    e.preventDefault();\n    setFormError(\"\");\n    setSuccessMsg(\"\");\n    if (!user) {\n      setFormError(\"User not logged in\");\n      return;\n    }\n    if (!form.name || !form.land_size || !form.cultivate_date || !form.harvest_date || !form.total_cost) {\n      setFormError(\"All fields are required.\");\n      return;\n    }\n    if (isNaN(form.land_size) || Number(form.land_size) <= 0) {\n      setFormError(\"Land size must be a positive number.\");\n      return;\n    }\n    if (isNaN(form.total_cost) || Number(form.total_cost) < 0) {\n      setFormError(\"Total cost must be a non-negative number.\");\n      return;\n    }\n    try {\n      const res = await fetch(`http://localhost:5000/api/crops/add`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          ...form,\n          farmer_id: user.id\n        })\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data.message || \"Failed to add crop\");\n      setForm({\n        name: \"\",\n        land_size: \"\",\n        cultivate_date: \"\",\n        harvest_date: \"\",\n        total_cost: \"\",\n        crop_pic: \"\"\n      });\n      setPicPreview(\"\");\n      setSuccessMsg(\"Crop added successfully!\");\n      fetchCrops();\n    } catch (err) {\n      setFormError(\"Error adding crop: \" + err.message);\n    }\n  };\n  const handleDeleteCrop = async cropId => {\n    if (!window.confirm(\"Are you sure you want to delete this crop?\")) return;\n    try {\n      const res = await fetch(`http://localhost:5000/api/crops/${cropId}`, {\n        method: \"DELETE\",\n        credentials: \"include\"\n      });\n      if (!res.ok) {\n        const data = await res.json();\n        alert(\"Error deleting crop: \" + (data.message || \"Unknown error\"));\n        return;\n      }\n      fetchCrops();\n      alert(\"Crop deleted!\");\n    } catch (err) {\n      alert(\"Error deleting crop: \" + err.message);\n    }\n  };\n  const handleUpdateCrop = async (cropId, updatedFields) => {\n    if (!updatedFields.total_cost || isNaN(updatedFields.total_cost) || Number(updatedFields.total_cost) < 0) {\n      alert(\"Total cost must be a non-negative number.\");\n      return;\n    }\n    if (!window.confirm(\"Are you sure you want to update the cost?\")) return;\n    try {\n      const res = await fetch(`http://localhost:5000/api/crops/${cropId}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify(updatedFields)\n      });\n      if (!res.ok) {\n        const data = await res.json();\n        alert(\"Error updating crop: \" + (data.message || \"Unknown error\"));\n        return;\n      }\n      fetchCrops();\n      alert(\"Crop cost updated!\");\n    } catch (err) {\n      alert(\"Error updating crop: \" + err.message);\n    }\n  };\n  const handleHarvestSubmit = async e => {\n    e.preventDefault();\n    setHarvestError(\"\");\n    setHarvestSuccess(\"\");\n    if (!harvestCrop) return;\n    if (!harvestForm.quantity || isNaN(harvestForm.quantity) || Number(harvestForm.quantity) <= 0) {\n      setHarvestError(\"Quantity must be a positive number.\");\n      return;\n    }\n    if (!harvestForm.price || isNaN(harvestForm.price) || Number(harvestForm.price) < 0) {\n      setHarvestError(\"Price must be a non-negative number.\");\n      return;\n    }\n    try {\n      const res = await fetch(`http://localhost:5000/api/marketplace/harvest/${harvestCrop.id}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          price: harvestForm.price,\n          quantity: harvestForm.quantity\n        })\n      });\n      if (!res.ok) {\n        const data = await res.json();\n        setHarvestError(\"Error adding to marketplace: \" + (data.message || \"Unknown error\"));\n        return;\n      }\n      setHarvestSuccess(\"Crop added to marketplace!\");\n      // Remove harvested crop from farmer home page\n      setCrops(prev => prev.filter(c => c.id !== harvestCrop.id));\n      setHarvestForm({\n        quantity: \"\",\n        price: \"\"\n      });\n      setTimeout(() => setHarvestCrop(null), 1200);\n    } catch (err) {\n      setHarvestError(\"Error adding to marketplace: \" + err.message);\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading crops...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"farmer-crop-bg\",\n    style: {\n      minHeight: '100vh',\n      background: 'linear-gradient(135deg, #e0f7fa 0%, #f9fbe7 100%)',\n      padding: '32px 0'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"font-bold mb-2\",\n      children: \"My Crops\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), crops.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No crops added yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 29\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid gap-4\",\n      children: crops.map(crop => {\n        let percent = 0;\n        if (crop.cultivate_date && crop.harvest_date) {\n          const start = new Date(crop.cultivate_date);\n          const end = new Date(crop.harvest_date);\n          const now = new Date();\n          if (end > start) {\n            const totalDays = (end - start) / (1000 * 60 * 60 * 24);\n            const elapsedDays = (now - start) / (1000 * 60 * 60 * 24);\n            percent = Math.min(100, Math.max(0, (elapsedDays / totalDays * 100).toFixed(2)));\n          }\n        }\n        const canHarvest = percent >= 80;\n        const requests = requestsMap[crop.id] || [];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-3 border rounded\",\n          style: {\n            position: 'relative',\n            minHeight: 220\n          },\n          children: [crop.crop_pic && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: crop.crop_pic,\n            alt: \"Crop\",\n            style: {\n              maxWidth: 100,\n              marginBottom: 8,\n              borderRadius: 8\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 35\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: crop.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 20\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Land: \", crop.land_size, \" acre\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Cultivate: \", crop.cultivate_date, \" | Harvest: \", crop.harvest_date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total Cost: \", crop.total_cost, \" Tk\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"highlight\",\n              children: [percent, \"% grown\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 28\n            }, this), \" \", percent < 80 && \"(Cannot harvest before 80%)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleUpdateCrop(crop.id, {\n              total_cost: prompt(\"Update total cost:\", crop.total_cost)\n            }),\n            className: \"mr-2 bg-yellow-500 text-white px-2 py-1 rounded\",\n            children: \"Update Cost\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDeleteCrop(crop.id),\n            className: \"mr-2 bg-red-500 text-white px-2 py-1 rounded\",\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setHarvestCrop(crop),\n            className: \"bg-blue-500 text-white px-2 py-1 rounded\",\n            disabled: !canHarvest,\n            title: !canHarvest ? \"You can only harvest when crop is at least 80% grown.\" : \"Harvest\",\n            children: \"Harvest\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 17\n          }, this)]\n        }, crop.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 9\n    }, this), harvestCrop && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: () => setHarvestCrop(null),\n          style: {\n            float: 'right'\n          },\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Harvest \", harvestCrop.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this), harvestError && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-box\",\n          children: harvestError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 30\n        }, this), harvestSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toast-success\",\n          children: harvestSuccess\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 32\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleHarvestSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Quantity\",\n            value: harvestForm.quantity,\n            onChange: e => setHarvestForm({\n              ...harvestForm,\n              quantity: e.target.value\n            }),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Price per unit/kg\",\n            value: harvestForm.price,\n            onChange: e => setHarvestForm({\n              ...harvestForm,\n              price: e.target.value\n            }),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => setHarvestCrop(null),\n              className: \"cancel-btn\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"confirm-btn\",\n              children: \"Add to Marketplace\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 5\n  }, this);\n}\n_s(FarmerCropPage, \"B49lGjClbMoN4jPdsadbPxh80w0=\");\n_c = FarmerCropPage;\nvar _c;\n$RefreshReg$(_c, \"FarmerCropPage\");","map":{"version":3,"names":["React","useEffect","useState","useContext","jsPDF","AuthContext","jsxDEV","_jsxDEV","FarmerCropPage","_s","searchArea","setSearchArea","weather","setWeather","weatherLoading","setWeatherLoading","weatherError","setWeatherError","WEATHER_API_KEY","handleWeatherSearch","e","preventDefault","res","fetch","encodeURIComponent","ok","data","json","err","user","crops","setCrops","requestsMap","setRequestsMap","selectedRequests","setSelectedRequests","dealPopup","setDealPopup","loading","setLoading","form","setForm","name","land_size","cultivate_date","harvest_date","total_cost","crop_pic","picPreview","setPicPreview","formError","setFormError","successMsg","setSuccessMsg","harvestCrop","setHarvestCrop","harvestForm","setHarvestForm","quantity","price","harvestError","setHarvestError","harvestSuccess","setHarvestSuccess","fetchCrops","useCallback","id","credentials","crop","reqRes","reqData","prev","console","error","handleChange","target","value","handlePicChange","file","files","reader","FileReader","onloadend","f","result","readAsDataURL","handleAddCrop","isNaN","Number","method","headers","body","JSON","stringify","farmer_id","Error","message","handleDeleteCrop","cropId","window","confirm","alert","handleUpdateCrop","updatedFields","handleHarvestSubmit","filter","c","setTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","minHeight","background","padding","length","map","percent","start","Date","end","now","totalDays","elapsedDays","Math","min","max","toFixed","canHarvest","requests","position","src","alt","maxWidth","marginBottom","borderRadius","onClick","prompt","disabled","title","float","onSubmit","type","placeholder","onChange","required","_c","$RefreshReg$"],"sources":["C:/Agro-Vision/frontend/src/pages/FarmerCropPage.jsx"],"sourcesContent":["//frontend/src/pages/FarmerCropPage.jsx\r\nimport React, { useEffect, useState, useContext } from \"react\";\r\nimport jsPDF from \"jspdf\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\n\r\nexport default function FarmerCropPage() {\r\n  const [searchArea, setSearchArea] = useState(\"\");\r\n  const [weather, setWeather] = useState(null);\r\n  const [weatherLoading, setWeatherLoading] = useState(false);\r\n  const [weatherError, setWeatherError] = useState(\"\");\r\n  const WEATHER_API_KEY = \"93869cd59972015bacc2b11a2c2b74c7\";\r\n\r\n  const handleWeatherSearch = async (e) => {\r\n    e.preventDefault();\r\n    setWeather(null);\r\n    setWeatherError(\"\");\r\n    setWeatherLoading(true);\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(searchArea)},bd&appid=${WEATHER_API_KEY}&units=metric`\r\n      );\r\n      if (!res.ok) {\r\n        setWeatherError(\"Area not found or API error.\");\r\n        setWeatherLoading(false);\r\n        return;\r\n      }\r\n      const data = await res.json();\r\n      setWeather(data);\r\n    } catch (err) {\r\n      setWeatherError(\"Failed to fetch weather data.\");\r\n    } finally {\r\n      setWeatherLoading(false);\r\n    }\r\n  };\r\n\r\n  const { user } = useContext(AuthContext);\r\n  const [crops, setCrops] = useState([]);\r\n  const [requestsMap, setRequestsMap] = useState({});\r\n  const [selectedRequests, setSelectedRequests] = useState({});\r\n  const [dealPopup, setDealPopup] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [form, setForm] = useState({\r\n    name: \"\",\r\n    land_size: \"\",\r\n    cultivate_date: \"\",\r\n    harvest_date: \"\",\r\n    total_cost: \"\",\r\n    crop_pic: \"\"\r\n  });\r\n  const [picPreview, setPicPreview] = useState(\"\");\r\n  const [formError, setFormError] = useState(\"\");\r\n  const [successMsg, setSuccessMsg] = useState(\"\");\r\n\r\n  // harvest modal\r\n  const [harvestCrop, setHarvestCrop] = useState(null);\r\n  const [harvestForm, setHarvestForm] = useState({\r\n    quantity: \"\",\r\n    price: \"\",\r\n  });\r\n  const [harvestError, setHarvestError] = useState(\"\");\r\n  const [harvestSuccess, setHarvestSuccess] = useState(\"\");\r\n\r\n  const fetchCrops = React.useCallback(async () => {\r\n    if (!user) return;\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/api/crops/farmer/${user.id}`, {\r\n        credentials: \"include\",\r\n      });\r\n      const data = await res.json();\r\n      setCrops(data);\r\n\r\n      for (const crop of data) {\r\n        const reqRes = await fetch(`http://localhost:5000/api/marketplace/${crop.id}/requests`, { credentials: \"include\" });\r\n        if (reqRes.ok) {\r\n          const reqData = await reqRes.json();\r\n          setRequestsMap(prev => ({ ...prev, [crop.id]: reqData }));\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    fetchCrops();\r\n  }, [user, fetchCrops]);\r\n\r\n  const handleChange = (e) => setForm({ ...form, [e.target.name]: e.target.value });\r\n\r\n  const handlePicChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setForm(f => ({ ...f, crop_pic: reader.result }));\r\n        setPicPreview(reader.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const handleAddCrop = async (e) => {\r\n    e.preventDefault();\r\n    setFormError(\"\");\r\n    setSuccessMsg(\"\");\r\n    if (!user) {\r\n      setFormError(\"User not logged in\");\r\n      return;\r\n    }\r\n    if (!form.name || !form.land_size || !form.cultivate_date || !form.harvest_date || !form.total_cost) {\r\n      setFormError(\"All fields are required.\");\r\n      return;\r\n    }\r\n    if (isNaN(form.land_size) || Number(form.land_size) <= 0) {\r\n      setFormError(\"Land size must be a positive number.\");\r\n      return;\r\n    }\r\n    if (isNaN(form.total_cost) || Number(form.total_cost) < 0) {\r\n      setFormError(\"Total cost must be a non-negative number.\");\r\n      return;\r\n    }\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/api/crops/add`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        credentials: \"include\",\r\n        body: JSON.stringify({ ...form, farmer_id: user.id }),\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.message || \"Failed to add crop\");\r\n      setForm({\r\n        name: \"\",\r\n        land_size: \"\",\r\n        cultivate_date: \"\",\r\n        harvest_date: \"\",\r\n        total_cost: \"\",\r\n        crop_pic: \"\"\r\n      });\r\n      setPicPreview(\"\");\r\n      setSuccessMsg(\"Crop added successfully!\");\r\n      fetchCrops();\r\n    } catch (err) {\r\n      setFormError(\"Error adding crop: \" + err.message);\r\n    }\r\n  };\r\n\r\n  const handleDeleteCrop = async (cropId) => {\r\n    if (!window.confirm(\"Are you sure you want to delete this crop?\")) return;\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/api/crops/${cropId}`, { method: \"DELETE\", credentials: \"include\" });\r\n      if (!res.ok) {\r\n        const data = await res.json();\r\n        alert(\"Error deleting crop: \" + (data.message || \"Unknown error\"));\r\n        return;\r\n      }\r\n      fetchCrops();\r\n      alert(\"Crop deleted!\");\r\n    } catch (err) {\r\n      alert(\"Error deleting crop: \" + err.message);\r\n    }\r\n  };\r\n\r\n  const handleUpdateCrop = async (cropId, updatedFields) => {\r\n    if (!updatedFields.total_cost || isNaN(updatedFields.total_cost) || Number(updatedFields.total_cost) < 0) {\r\n      alert(\"Total cost must be a non-negative number.\");\r\n      return;\r\n    }\r\n    if (!window.confirm(\"Are you sure you want to update the cost?\")) return;\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/api/crops/${cropId}`, {\r\n        method: \"PATCH\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        credentials: \"include\",\r\n        body: JSON.stringify(updatedFields),\r\n      });\r\n      if (!res.ok) {\r\n        const data = await res.json();\r\n        alert(\"Error updating crop: \" + (data.message || \"Unknown error\"));\r\n        return;\r\n      }\r\n      fetchCrops();\r\n      alert(\"Crop cost updated!\");\r\n    } catch (err) {\r\n      alert(\"Error updating crop: \" + err.message);\r\n    }\r\n  };\r\n\r\n  const handleHarvestSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setHarvestError(\"\");\r\n    setHarvestSuccess(\"\");\r\n    if (!harvestCrop) return;\r\n\r\n    if (!harvestForm.quantity || isNaN(harvestForm.quantity) || Number(harvestForm.quantity) <= 0) {\r\n      setHarvestError(\"Quantity must be a positive number.\");\r\n      return;\r\n    }\r\n    if (!harvestForm.price || isNaN(harvestForm.price) || Number(harvestForm.price) < 0) {\r\n      setHarvestError(\"Price must be a non-negative number.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/api/marketplace/harvest/${harvestCrop.id}`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        credentials: \"include\",\r\n        body: JSON.stringify({\r\n          price: harvestForm.price,\r\n          quantity: harvestForm.quantity\r\n        }),\r\n      });\r\n      if (!res.ok) {\r\n        const data = await res.json();\r\n        setHarvestError(\"Error adding to marketplace: \" + (data.message || \"Unknown error\"));\r\n        return;\r\n      }\r\n\r\n      setHarvestSuccess(\"Crop added to marketplace!\");\r\n      // Remove harvested crop from farmer home page\r\n      setCrops(prev => prev.filter(c => c.id !== harvestCrop.id));\r\n\r\n      setHarvestForm({ quantity: \"\", price: \"\" });\r\n      setTimeout(() => setHarvestCrop(null), 1200);\r\n    } catch (err) {\r\n      setHarvestError(\"Error adding to marketplace: \" + err.message);\r\n    }\r\n  };\r\n\r\n  if (loading) return <p>Loading crops...</p>;\r\n\r\n  return (\r\n    <div className=\"farmer-crop-bg\" style={{ minHeight: '100vh', background: 'linear-gradient(135deg, #e0f7fa 0%, #f9fbe7 100%)', padding: '32px 0' }}>\r\n      {/* ...weather search & add crop form same as before... */}\r\n\r\n      {/* Crop List */}\r\n      <h3 className=\"font-bold mb-2\">My Crops</h3>\r\n      {crops.length === 0 ? <p>No crops added yet.</p> : (\r\n        <div className=\"grid gap-4\">\r\n          {crops.map((crop) => {\r\n            let percent = 0;\r\n            if (crop.cultivate_date && crop.harvest_date) {\r\n              const start = new Date(crop.cultivate_date);\r\n              const end = new Date(crop.harvest_date);\r\n              const now = new Date();\r\n              if (end > start) {\r\n                const totalDays = (end - start) / (1000*60*60*24);\r\n                const elapsedDays = (now - start) / (1000*60*60*24);\r\n                percent = Math.min(100, Math.max(0, ((elapsedDays / totalDays) * 100).toFixed(2)));\r\n              }\r\n            }\r\n            const canHarvest = percent >= 80;\r\n            const requests = requestsMap[crop.id] || [];\r\n\r\n            return (\r\n              <div key={crop.id} className=\"p-3 border rounded\" style={{ position: 'relative', minHeight: 220 }}>\r\n                {crop.crop_pic && <img src={crop.crop_pic} alt=\"Crop\" style={{maxWidth:100, marginBottom:8, borderRadius:8}} />}\r\n                <p><strong>{crop.name}</strong></p>\r\n                <p>Land: {crop.land_size} acre</p>\r\n                <p>Cultivate: {crop.cultivate_date} | Harvest: {crop.harvest_date}</p>\r\n                <p>Total Cost: {crop.total_cost} Tk</p>\r\n                <p>Status: <span className=\"highlight\">{percent}% grown</span> {percent < 80 && \"(Cannot harvest before 80%)\"}</p>\r\n\r\n                <button onClick={() => handleUpdateCrop(crop.id, { total_cost: prompt(\"Update total cost:\", crop.total_cost) })} className=\"mr-2 bg-yellow-500 text-white px-2 py-1 rounded\">Update Cost</button>\r\n                <button onClick={() => handleDeleteCrop(crop.id)} className=\"mr-2 bg-red-500 text-white px-2 py-1 rounded\">Delete</button>\r\n                <button\r\n                  onClick={() => setHarvestCrop(crop)}\r\n                  className=\"bg-blue-500 text-white px-2 py-1 rounded\"\r\n                  disabled={!canHarvest}\r\n                  title={!canHarvest ? \"You can only harvest when crop is at least 80% grown.\" : \"Harvest\"}\r\n                >\r\n                  Harvest\r\n                </button>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n\r\n      {/* Harvest Modal */}\r\n      {harvestCrop && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-box\">\r\n            <button className=\"close-btn\" onClick={() => setHarvestCrop(null)} style={{float:'right'}}>×</button>\r\n            <h3>Harvest {harvestCrop.name}</h3>\r\n            {harvestError && <div className=\"error-box\">{harvestError}</div>}\r\n            {harvestSuccess && <div className=\"toast-success\">{harvestSuccess}</div>}\r\n            <form onSubmit={handleHarvestSubmit}>\r\n              <input type=\"number\" placeholder=\"Quantity\" value={harvestForm.quantity} onChange={(e) => setHarvestForm({ ...harvestForm, quantity: e.target.value })} required />\r\n              <input type=\"number\" placeholder=\"Price per unit/kg\" value={harvestForm.price} onChange={(e) => setHarvestForm({ ...harvestForm, price: e.target.value })} required />\r\n              <div className=\"modal-actions\">\r\n                <button type=\"button\" onClick={() => setHarvestCrop(null)} className=\"cancel-btn\">Cancel</button>\r\n                <button type=\"submit\" className=\"confirm-btn\">Add to Marketplace</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}