{"ast":null,"code":"var _jsxFileName = \"C:\\\\Agro-Vision\\\\frontend\\\\src\\\\pages\\\\FarmerCropPage.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useContext } from \"react\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FarmerCropPage() {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [crops, setCrops] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [form, setForm] = useState({\n    name: \"\",\n    land_size: \"\",\n    cultivate_date: \"\",\n    harvest_date: \"\",\n    total_cost: \"\",\n    crop_pic: \"\"\n  });\n  const [picPreview, setPicPreview] = useState(\"\");\n  const [formError, setFormError] = useState(\"\");\n  const [successMsg, setSuccessMsg] = useState(\"\");\n\n  // harvest modal state\n  const [harvestCrop, setHarvestCrop] = useState(null);\n  const [harvestForm, setHarvestForm] = useState({\n    quantity: \"\",\n    price: \"\"\n  });\n  const [harvestError, setHarvestError] = useState(\"\");\n  const [harvestSuccess, setHarvestSuccess] = useState(\"\");\n  const fetchCrops = async () => {\n    if (!user) return;\n    try {\n      const res = await fetch(`http://localhost:5000/api/crops/farmer/${user.id}`, {\n        credentials: \"include\"\n      });\n      const data = await res.json();\n      setCrops(data);\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchCrops();\n  }, [user]);\n  const handleChange = e => setForm({\n    ...form,\n    [e.target.name]: e.target.value\n  });\n  const handlePicChange = e => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setForm(f => ({\n          ...f,\n          crop_pic: reader.result\n        }));\n        setPicPreview(reader.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  const handleAddCrop = async e => {\n    e.preventDefault();\n    setFormError(\"\");\n    setSuccessMsg(\"\");\n    if (!user) {\n      setFormError(\"User not logged in\");\n      return;\n    }\n    // Validation\n    if (!form.name || !form.land_size || !form.cultivate_date || !form.harvest_date || !form.total_cost) {\n      setFormError(\"All fields are required.\");\n      return;\n    }\n    if (isNaN(form.land_size) || Number(form.land_size) <= 0) {\n      setFormError(\"Land size must be a positive number.\");\n      return;\n    }\n    if (isNaN(form.total_cost) || Number(form.total_cost) < 0) {\n      setFormError(\"Total cost must be a non-negative number.\");\n      return;\n    }\n    try {\n      const res = await fetch(`http://localhost:5000/api/crops`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          ...form,\n          farmer_id: user.id\n        })\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data.message || \"Failed to add crop\");\n      setForm({\n        name: \"\",\n        land_size: \"\",\n        cultivate_date: \"\",\n        harvest_date: \"\",\n        total_cost: \"\",\n        crop_pic: \"\"\n      });\n      setPicPreview(\"\");\n      setSuccessMsg(\"Crop added successfully!\");\n      fetchCrops();\n    } catch (err) {\n      setFormError(\"Error adding crop: \" + err.message);\n    }\n  };\n  const handleDeleteCrop = async cropId => {\n    if (!window.confirm(\"Are you sure you want to delete this crop? This action cannot be undone.\")) return;\n    try {\n      const res = await fetch(`http://localhost:5000/api/crops/${cropId}`, {\n        method: \"DELETE\",\n        credentials: \"include\"\n      });\n      if (!res.ok) {\n        const data = await res.json();\n        alert(\"Error deleting crop: \" + (data.message || \"Unknown error\"));\n        return;\n      }\n      fetchCrops();\n      alert(\"Crop deleted!\");\n    } catch (err) {\n      alert(\"Error deleting crop: \" + err.message);\n    }\n  };\n  const handleUpdateCrop = async (cropId, updatedFields) => {\n    if (!updatedFields.total_cost || isNaN(updatedFields.total_cost) || Number(updatedFields.total_cost) < 0) {\n      alert(\"Total cost must be a non-negative number.\");\n      return;\n    }\n    if (!window.confirm(\"Are you sure you want to update the cost?\")) return;\n    try {\n      const res = await fetch(`http://localhost:5000/api/crops/${cropId}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify(updatedFields)\n      });\n      if (!res.ok) {\n        const data = await res.json();\n        alert(\"Error updating crop: \" + (data.message || \"Unknown error\"));\n        return;\n      }\n      fetchCrops();\n      alert(\"Crop cost updated!\");\n    } catch (err) {\n      alert(\"Error updating crop: \" + err.message);\n    }\n  };\n  const handleHarvestSubmit = async e => {\n    e.preventDefault();\n    setHarvestError(\"\");\n    setHarvestSuccess(\"\");\n    if (!harvestCrop) return;\n    // Validation\n    if (!harvestForm.quantity || isNaN(harvestForm.quantity) || Number(harvestForm.quantity) <= 0) {\n      setHarvestError(\"Quantity must be a positive number.\");\n      return;\n    }\n    if (!harvestForm.price || isNaN(harvestForm.price) || Number(harvestForm.price) < 0) {\n      setHarvestError(\"Price must be a non-negative number.\");\n      return;\n    }\n    try {\n      const res = await fetch(`http://localhost:5000/api/marketplace/harvest/${harvestCrop.id}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          price: harvestForm.price,\n          quantity: harvestForm.quantity\n        })\n      });\n      if (!res.ok) {\n        const data = await res.json();\n        setHarvestError(\"Error adding to marketplace: \" + (data.message || \"Unknown error\"));\n        return;\n      }\n      setHarvestCrop(null); // close modal\n      setHarvestForm({\n        quantity: \"\",\n        price: \"\"\n      });\n      setHarvestSuccess(\"Crop added to marketplace!\");\n      fetchCrops();\n    } catch (err) {\n      setHarvestError(\"Error adding to marketplace: \" + err.message);\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading crops...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleAddCrop,\n      className: \"mb-6 p-4 border rounded\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"font-bold mb-2\",\n        children: \"Add New Crop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), formError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-box\",\n        children: formError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 23\n      }, this), successMsg && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toast-success\",\n        children: successMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"name\",\n        placeholder: \"Crop Name\",\n        value: form.name,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: handlePicChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 3\n      }, this), picPreview && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: picPreview,\n        alt: \"Preview\",\n        style: {\n          maxWidth: 100,\n          marginBottom: 8\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"land_size\",\n        placeholder: \"Land Size (acre)\",\n        value: form.land_size,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"cultivate_date\",\n        type: \"date\",\n        value: form.cultivate_date,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"harvest_date\",\n        type: \"date\",\n        value: form.harvest_date,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"total_cost\",\n        type: \"number\",\n        placeholder: \"Total Cost\",\n        value: form.total_cost,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"mt-2 bg-green-500 text-white px-3 py-1 rounded\",\n        children: \"Add Crop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"font-bold mb-2\",\n      children: \"My Crops\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), crops.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No crops added yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid gap-4\",\n      children: crops.map(crop => {\n        // Calculate growth percentage\n        let percent = 0;\n        if (crop.cultivate_date && crop.harvest_date) {\n          const start = new Date(crop.cultivate_date);\n          const end = new Date(crop.harvest_date);\n          const now = new Date();\n          if (end > start) {\n            percent = Math.min(100, Math.max(0, Math.round((now - start) / (end - start) * 100)));\n          }\n        }\n        const canHarvest = percent >= 80;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-3 border rounded\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: crop.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 20\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 17\n          }, this), crop.crop_pic && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: crop.crop_pic,\n            alt: \"Crop\",\n            style: {\n              maxWidth: 100,\n              marginBottom: 8\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 35\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Land: \", crop.land_size, \" acre\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Cultivate: \", crop.cultivate_date, \" | Harvest: \", crop.harvest_date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total Cost: \", crop.total_cost, \" Tk\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"highlight\",\n              children: [percent, \"% grown\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 28\n            }, this), \" \", percent < 80 && \"(Cannot harvest before 80%)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              const newCost = prompt(\"Update total cost:\", crop.total_cost);\n              if (newCost !== null && newCost !== \"\") handleUpdateCrop(crop.id, {\n                total_cost: newCost\n              });\n            },\n            className: \"mr-2 bg-yellow-500 text-white px-2 py-1 rounded\",\n            children: \"Update Cost\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDeleteCrop(crop.id),\n            className: \"mr-2 bg-red-500 text-white px-2 py-1 rounded\",\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setHarvestCrop(crop),\n            className: \"bg-blue-500 text-white px-2 py-1 rounded\",\n            disabled: !canHarvest,\n            title: !canHarvest ? \"You can only harvest when crop is at least 80% grown.\" : \"Harvest\",\n            children: \"Harvest\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 17\n          }, this)]\n        }, crop.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this), harvestCrop && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: () => setHarvestCrop(null),\n          style: {\n            float: 'right'\n          },\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Harvest \", harvestCrop.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this), harvestError && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-box\",\n          children: harvestError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 30\n        }, this), harvestSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toast-success\",\n          children: harvestSuccess\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 32\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleHarvestSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Quantity\",\n            value: harvestForm.quantity,\n            onChange: e => setHarvestForm({\n              ...harvestForm,\n              quantity: e.target.value\n            }),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Price per unit/kg\",\n            value: harvestForm.price,\n            onChange: e => setHarvestForm({\n              ...harvestForm,\n              price: e.target.value\n            }),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => setHarvestCrop(null),\n              className: \"cancel-btn\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"confirm-btn\",\n              children: \"Add to Marketplace\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n}\n_s(FarmerCropPage, \"CoVoW8h5FOapilkACPDXkg+nGO0=\");\n_c = FarmerCropPage;\nvar _c;\n$RefreshReg$(_c, \"FarmerCropPage\");","map":{"version":3,"names":["useEffect","useState","useContext","AuthContext","jsxDEV","_jsxDEV","FarmerCropPage","_s","user","crops","setCrops","loading","setLoading","form","setForm","name","land_size","cultivate_date","harvest_date","total_cost","crop_pic","picPreview","setPicPreview","formError","setFormError","successMsg","setSuccessMsg","harvestCrop","setHarvestCrop","harvestForm","setHarvestForm","quantity","price","harvestError","setHarvestError","harvestSuccess","setHarvestSuccess","fetchCrops","res","fetch","id","credentials","data","json","err","console","error","handleChange","e","target","value","handlePicChange","file","files","reader","FileReader","onloadend","f","result","readAsDataURL","handleAddCrop","preventDefault","isNaN","Number","method","headers","body","JSON","stringify","farmer_id","ok","Error","message","handleDeleteCrop","cropId","window","confirm","alert","handleUpdateCrop","updatedFields","handleHarvestSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","className","placeholder","onChange","required","type","accept","src","alt","style","maxWidth","marginBottom","length","map","crop","percent","start","Date","end","now","Math","min","max","round","canHarvest","onClick","newCost","prompt","disabled","title","float","_c","$RefreshReg$"],"sources":["C:/Agro-Vision/frontend/src/pages/FarmerCropPage.jsx"],"sourcesContent":["import { useEffect, useState, useContext } from \"react\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\n\r\nexport default function FarmerCropPage() {\r\n  const { user } = useContext(AuthContext);\r\n  const [crops, setCrops] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [form, setForm] = useState({\r\n    name: \"\",\r\n    land_size: \"\",\r\n    cultivate_date: \"\",\r\n    harvest_date: \"\",\r\n    total_cost: \"\",\r\n    crop_pic: \"\"\r\n  });\r\n  const [picPreview, setPicPreview] = useState(\"\");\r\n  const [formError, setFormError] = useState(\"\");\r\n  const [successMsg, setSuccessMsg] = useState(\"\");\r\n\r\n  // harvest modal state\r\n  const [harvestCrop, setHarvestCrop] = useState(null);\r\n  const [harvestForm, setHarvestForm] = useState({\r\n    quantity: \"\",\r\n    price: \"\",\r\n  });\r\n  const [harvestError, setHarvestError] = useState(\"\");\r\n  const [harvestSuccess, setHarvestSuccess] = useState(\"\");\r\n\r\n  const fetchCrops = async () => {\r\n    if (!user) return;\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/api/crops/farmer/${user.id}`, {\r\n        credentials: \"include\",\r\n      });\r\n      const data = await res.json();\r\n      setCrops(data);\r\n    } catch (err) {\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCrops();\r\n  }, [user]);\r\n\r\n  const handleChange = (e) => setForm({ ...form, [e.target.name]: e.target.value });\r\n\r\n  const handlePicChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setForm(f => ({ ...f, crop_pic: reader.result }));\r\n        setPicPreview(reader.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const handleAddCrop = async (e) => {\r\n    e.preventDefault();\r\n    setFormError(\"\");\r\n    setSuccessMsg(\"\");\r\n    if (!user) {\r\n      setFormError(\"User not logged in\");\r\n      return;\r\n    }\r\n    // Validation\r\n    if (!form.name || !form.land_size || !form.cultivate_date || !form.harvest_date || !form.total_cost) {\r\n      setFormError(\"All fields are required.\");\r\n      return;\r\n    }\r\n    if (isNaN(form.land_size) || Number(form.land_size) <= 0) {\r\n      setFormError(\"Land size must be a positive number.\");\r\n      return;\r\n    }\r\n    if (isNaN(form.total_cost) || Number(form.total_cost) < 0) {\r\n      setFormError(\"Total cost must be a non-negative number.\");\r\n      return;\r\n    }\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/api/crops`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        credentials: \"include\",\r\n        body: JSON.stringify({ ...form, farmer_id: user.id }),\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.message || \"Failed to add crop\");\r\n      setForm({\r\n        name: \"\",\r\n        land_size: \"\",\r\n        cultivate_date: \"\",\r\n        harvest_date: \"\",\r\n        total_cost: \"\",\r\n        crop_pic: \"\"\r\n      });\r\n      setPicPreview(\"\");\r\n      setSuccessMsg(\"Crop added successfully!\");\r\n      fetchCrops();\r\n    } catch (err) {\r\n      setFormError(\"Error adding crop: \" + err.message);\r\n    }\r\n  };\r\n  const handleDeleteCrop = async (cropId) => {\r\n    if (!window.confirm(\"Are you sure you want to delete this crop? This action cannot be undone.\")) return;\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/api/crops/${cropId}`, {\r\n        method: \"DELETE\",\r\n        credentials: \"include\"\r\n      });\r\n      if (!res.ok) {\r\n        const data = await res.json();\r\n        alert(\"Error deleting crop: \" + (data.message || \"Unknown error\"));\r\n        return;\r\n      }\r\n      fetchCrops();\r\n      alert(\"Crop deleted!\");\r\n    } catch (err) {\r\n      alert(\"Error deleting crop: \" + err.message);\r\n    }\r\n  };\r\n\r\n  const handleUpdateCrop = async (cropId, updatedFields) => {\r\n    if (!updatedFields.total_cost || isNaN(updatedFields.total_cost) || Number(updatedFields.total_cost) < 0) {\r\n      alert(\"Total cost must be a non-negative number.\");\r\n      return;\r\n    }\r\n    if (!window.confirm(\"Are you sure you want to update the cost?\")) return;\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/api/crops/${cropId}`, {\r\n        method: \"PATCH\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        credentials: \"include\",\r\n        body: JSON.stringify(updatedFields),\r\n      });\r\n      if (!res.ok) {\r\n        const data = await res.json();\r\n        alert(\"Error updating crop: \" + (data.message || \"Unknown error\"));\r\n        return;\r\n      }\r\n      fetchCrops();\r\n      alert(\"Crop cost updated!\");\r\n    } catch (err) {\r\n      alert(\"Error updating crop: \" + err.message);\r\n    }\r\n  };\r\n\r\n  const handleHarvestSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setHarvestError(\"\");\r\n    setHarvestSuccess(\"\");\r\n    if (!harvestCrop) return;\r\n    // Validation\r\n    if (!harvestForm.quantity || isNaN(harvestForm.quantity) || Number(harvestForm.quantity) <= 0) {\r\n      setHarvestError(\"Quantity must be a positive number.\");\r\n      return;\r\n    }\r\n    if (!harvestForm.price || isNaN(harvestForm.price) || Number(harvestForm.price) < 0) {\r\n      setHarvestError(\"Price must be a non-negative number.\");\r\n      return;\r\n    }\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/api/marketplace/harvest/${harvestCrop.id}`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        credentials: \"include\",\r\n        body: JSON.stringify({\r\n          price: harvestForm.price,\r\n          quantity: harvestForm.quantity\r\n        }),\r\n      });\r\n      if (!res.ok) {\r\n        const data = await res.json();\r\n        setHarvestError(\"Error adding to marketplace: \" + (data.message || \"Unknown error\"));\r\n        return;\r\n      }\r\n      setHarvestCrop(null); // close modal\r\n      setHarvestForm({ quantity: \"\", price: \"\" });\r\n      setHarvestSuccess(\"Crop added to marketplace!\");\r\n      fetchCrops();\r\n    } catch (err) {\r\n      setHarvestError(\"Error adding to marketplace: \" + err.message);\r\n    }\r\n  };\r\n\r\n  if (loading) return <p>Loading crops...</p>;\r\n\r\n  return (\r\n    <div>\r\n      {/* Add Crop Form */}\r\n      <form onSubmit={handleAddCrop} className=\"mb-6 p-4 border rounded\">\r\n        <h3 className=\"font-bold mb-2\">Add New Crop</h3>\r\n        {formError && <div className=\"error-box\">{formError}</div>}\r\n        {successMsg && <div className=\"toast-success\">{successMsg}</div>}\r\n  <input name=\"name\" placeholder=\"Crop Name\" value={form.name} onChange={handleChange} required />\r\n  <input type=\"file\" accept=\"image/*\" onChange={handlePicChange} />\r\n  {picPreview && <img src={picPreview} alt=\"Preview\" style={{maxWidth:100, marginBottom:8}} />}\r\n        <input name=\"land_size\" placeholder=\"Land Size (acre)\" value={form.land_size} onChange={handleChange} required />\r\n        <input name=\"cultivate_date\" type=\"date\" value={form.cultivate_date} onChange={handleChange} required />\r\n        <input name=\"harvest_date\" type=\"date\" value={form.harvest_date} onChange={handleChange} required />\r\n        <input name=\"total_cost\" type=\"number\" placeholder=\"Total Cost\" value={form.total_cost} onChange={handleChange} required />\r\n        <button type=\"submit\" className=\"mt-2 bg-green-500 text-white px-3 py-1 rounded\">Add Crop</button>\r\n      </form>\r\n\r\n      {/* Crop List */}\r\n      <h3 className=\"font-bold mb-2\">My Crops</h3>\r\n      {crops.length === 0 ? (\r\n        <p>No crops added yet.</p>\r\n      ) : (\r\n        <div className=\"grid gap-4\">\r\n          {crops.map((crop) => {\r\n            // Calculate growth percentage\r\n            let percent = 0;\r\n            if (crop.cultivate_date && crop.harvest_date) {\r\n              const start = new Date(crop.cultivate_date);\r\n              const end = new Date(crop.harvest_date);\r\n              const now = new Date();\r\n              if (end > start) {\r\n                percent = Math.min(100, Math.max(0, Math.round(((now - start) / (end - start)) * 100)));\r\n              }\r\n            }\r\n            const canHarvest = percent >= 80;\r\n            return (\r\n              <div key={crop.id} className=\"p-3 border rounded\">\r\n                <p><strong>{crop.name}</strong></p>\r\n                {crop.crop_pic && <img src={crop.crop_pic} alt=\"Crop\" style={{maxWidth:100, marginBottom:8}} />}\r\n                <p>Land: {crop.land_size} acre</p>\r\n                <p>Cultivate: {crop.cultivate_date} | Harvest: {crop.harvest_date}</p>\r\n                <p>Total Cost: {crop.total_cost} Tk</p>\r\n                <p>Status: <span className=\"highlight\">{percent}% grown</span> {percent < 80 && \"(Cannot harvest before 80%)\"}</p>\r\n                <button\r\n                  onClick={() => {\r\n                    const newCost = prompt(\"Update total cost:\", crop.total_cost);\r\n                    if (newCost !== null && newCost !== \"\") handleUpdateCrop(crop.id, { total_cost: newCost });\r\n                  }}\r\n                  className=\"mr-2 bg-yellow-500 text-white px-2 py-1 rounded\"\r\n                >\r\n                  Update Cost\r\n                </button>\r\n                <button\r\n                  onClick={() => handleDeleteCrop(crop.id)}\r\n                  className=\"mr-2 bg-red-500 text-white px-2 py-1 rounded\"\r\n                >\r\n                  Delete\r\n                </button>\r\n                <button\r\n                  onClick={() => setHarvestCrop(crop)}\r\n                  className=\"bg-blue-500 text-white px-2 py-1 rounded\"\r\n                  disabled={!canHarvest}\r\n                  title={!canHarvest ? \"You can only harvest when crop is at least 80% grown.\" : \"Harvest\"}\r\n                >\r\n                  Harvest\r\n                </button>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n\r\n      {/* Harvest Modal */}\r\n      {harvestCrop && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-box\">\r\n            <button className=\"close-btn\" onClick={() => setHarvestCrop(null)} style={{float:'right'}}>×</button>\r\n            <h3>Harvest {harvestCrop.name}</h3>\r\n            {harvestError && <div className=\"error-box\">{harvestError}</div>}\r\n            {harvestSuccess && <div className=\"toast-success\">{harvestSuccess}</div>}\r\n            <form onSubmit={handleHarvestSubmit}>\r\n              <input\r\n                type=\"number\"\r\n                placeholder=\"Quantity\"\r\n                value={harvestForm.quantity}\r\n                onChange={(e) => setHarvestForm({ ...harvestForm, quantity: e.target.value })}\r\n                required\r\n              />\r\n              <input\r\n                type=\"number\"\r\n                placeholder=\"Price per unit/kg\"\r\n                value={harvestForm.price}\r\n                onChange={(e) => setHarvestForm({ ...harvestForm, price: e.target.value })}\r\n                required\r\n              />\r\n              <div className=\"modal-actions\">\r\n                <button type=\"button\" onClick={() => setHarvestCrop(null)} className=\"cancel-btn\">\r\n                  Cancel\r\n                </button>\r\n                <button type=\"submit\" className=\"confirm-btn\">\r\n                  Add to Marketplace\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}